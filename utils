#-*- ecoding:utf-8 -*-

import torch
import torch.nn as nn
import torch.functional as F
import numpy as np
import pandas as pd

class ScaledDotProductionAttention(nn.Module):
    '''scaled_dot_production_attention缩放因子dk'''
    def __init__(self, attention_dropout=0.0):
        super(ScaledDotProductionAttention,self).__init__()
        self.dropout = nn.Dropout(attention_dropout)
        self.softmax = nn.Softmax(dim=2)

    def forward(self, q, k, v, scale=None, atten_mask=None):
        """
        前向传播，
        :param q: query张量，形状[B, L_q, D_q]
        :param k: keys张量，[B, L_k, D_k]
        :param v: values张量,[B, L_v, D_v],一般就是k
        :param scale: 缩放因子，float
        :param atten_mask: masking张量，[B,L_q,L_k]
        :return:上下文的attention
        """
        attention = torch.bmm(q,k.transpose(1,2))
        if scale:
            attention = attention*scale
        if atten_mask:
            attention = attention.masked_fill_(atten_mask, -np.inf)

        #softmax
        attention = self.softmax(attention)
        attention = self.dropout(attention)

        #点积
        context = torch.bmm(attention, v)

        return context



class MultiHeadAttention(nn.Module):

    def __init__(self, model_dim=512, num_head=8, dropout=0.0):
        super(MultiHeadAttention,self).__init__()

        self.dim_per_head = model_dim // num_head
        self.num_head = num_head
        self.linear_k = nn.Linear(model_dim, self.dim_per_head*num_head)
        self.linear_q = nn.Linear(model_dim, self.dim_per_head*num_head)
        self.linear_v = nn.Linear(model_dim, self.dim_per_head*num_head)

        self.dot_product_attention = ScaledDotProductionAttention(dropout)
        self.linear_final = nn.Linear(model_dim,model_dim)
        self.dropout = nn.Dropout(dropout)

        self.layer_norm = nn.LayerNorm(model_dim)

    def forward(self, k, v, q, atten_mask=None):
        """

        :param q:
        :param k:
        :param v:
        :param atten_mask:
        :return:
        """
        # 残差连接
        residual = q
        dim_per_head = self.dim_per_head
        num_head = self.num_head
        batch_size = k.size(0)

        # linear
        k = self.linear_k(k)
        v = self.linear_v(v)
        q = self.linear_q(q)

        # split by heads
        k = k.view(batch_size*num_head, -1, dim_per_head)
        v = v.view(batch_size*num_head, -1, dim_per_head)
        q = q.view(batch_size*num_head, -1, dim_per_head)

        if atten_mask:
            atten_mask = atten_mask.repeat(num_head, 1, 1)

        # scaled dot product
        scale = (k.size(-1)) ** -0.5
        context, attention = self.dot_product_attention(q, k, v, scale, atten_mask)

        # contact
        context = context.view(batch_size, -1, dim_per_head*num_head)

        # final linear
        output = self.linear_final(context)

        # dropout
        output = self.dropout(output)

        # add and norm
        output = self.layer_norm(residual+output)

        return output, attention


def padding_mask(seq_k, seq_q):
	# seq_k和seq_q的形状都是[B,L]
    len_q = seq_q.size(1)
    # `PAD` is 0
    pad_mask = seq_k.eq(0)
    pad_mask = pad_mask.unsqueeze(1).expand(-1, len_q, -1)  # shape [B, L_q, L_k]
    return pad_mask


class PositionalEncoding(nn.Module):

    def __init__(self, d_model, max_seq_len):
        """初始化。

        Args:
            d_model: 一个标量。模型的维度，论文默认是512
            max_seq_len: 一个标量。文本序列的最大长度
        """
        super(PositionalEncoding, self).__init__()

        # 根据论文给的公式，构造出PE矩阵
        position_encoding = np.array([
            [pos / np.pow(10000, 2.0 * (j // 2) / d_model) for j in range(d_model)]
            for pos in range(max_seq_len)])
        # 偶数列使用sin，奇数列使用cos
        position_encoding[:, 0::2] = np.sin(position_encoding[:, 0::2])
        position_encoding[:, 1::2] = np.cos(position_encoding[:, 1::2])

        # 在PE矩阵的第一行，加上一行全是0的向量，代表这`PAD`的positional encoding
        # 在word embedding中也经常会加上`UNK`，代表位置单词的word embedding，两者十分类似
        # 那么为什么需要这个额外的PAD的编码呢？很简单，因为文本序列的长度不一，我们需要对齐，
        # 短的序列我们使用0在结尾补全，我们也需要这些补全位置的编码，也就是`PAD`对应的位置编码
        pad_row = torch.zeros([1, d_model])
        position_encoding = torch.cat((pad_row, position_encoding))

        # 嵌入操作，+1是因为增加了`PAD`这个补全位置的编码，
        # Word embedding中如果词典增加`UNK`，我们也需要+1。看吧，两者十分相似
        self.position_encoding = nn.Embedding(max_seq_len + 1, d_model)
        self.position_encoding.weight = nn.Parameter(position_encoding,
                                                     requires_grad=False)

    def forward(self, input_len):
        """神经网络的前向传播。

        Args:
          input_len: 一个张量，形状为[BATCH_SIZE, 1]。每一个张量的值代表这一批文本序列中对应的长度。

        Returns:
          返回这一批序列的位置编码，进行了对齐。
        """

        # 找出这一批序列的最大长度
        max_len = torch.max(input_len)
        tensor = torch.cuda.LongTensor if input_len.is_cuda else torch.LongTensor
        # 对每一个序列的位置进行对齐，在原序列位置的后面补上0
        # 这里range从1开始也是因为要避开PAD(0)的位置
        input_pos = tensor(
            [list(range(1, len + 1)) + [0] * (max_len - len) for len in input_len])
        return self.position_encoding(input_pos)

